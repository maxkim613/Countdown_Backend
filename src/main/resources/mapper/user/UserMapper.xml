<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="back.mapper.user.UserMapper">

	<select id="getUserList" parameterType="back.model.user.User" resultType="back.model.user.User">
		  SELECT *
		  FROM (
		    SELECT
		      ROWNUM AS RN,
		      B.USER_ID, 
		      B.USERNAME,
		      B.NICKNAME,
		      B.PASSWORD, 
		      B.EMAIL, 
		      B.USER_TEL,
		      B.POST_CODE,
		      B.ADDR,
		      B.ADDRD, 
		      B.CREATE_ID,
		      B.UPDATE_ID,
		      B.CREATE_DT,
		      B.UPDATE_DT,
		      B.ADMIN_YN,
		      B.DEL_YN,
		      B.ACC_YN 
		    FROM (
		      SELECT
		        A.USER_ID, 
		        A.USERNAME, 
		        A.NICKNAME,
		        A.PASSWORD, 
		        A.EMAIL, 
		        A.USER_TEL,
		        A.POST_CODE,
		        A.ADDR,
		        A.ADDRD, 
		        A.CREATE_ID,
		        A.UPDATE_ID,
		        TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT,
		        TO_CHAR(A.UPDATE_DT, 'YYYY-MM-DD') AS UPDATE_DT,
		        A.DEL_YN, 
		        A.ADMIN_YN,
		        A.ACC_YN
		      FROM USERS A
		      <where>
		        <if test="searchText != null and searchText != ''">
		          AND (
		            A.USERNAME LIKE '%'||#{searchText}||'%' OR
		            A.NICKNAME LIKE '%'||#{searchText}||'%' OR
		            A.EMAIL LIKE '%'||#{searchText}||'%'
		          )
		        </if>
		        <if test="startDate != null and startDate != ''">
		          <![CDATA[ AND A.CREATE_DT >= TO_DATE(#{startDate} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') ]]>
		        </if>
		        <if test="endDate != null and endDate != ''">
		          <![CDATA[ AND A.CREATE_DT <= TO_DATE(#{endDate} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS') ]]>
		        </if>
		         <if test="adminYn != null and adminYn != ''">
		          AND A.ADMIN_YN = #{adminYn}  <!-- 필터 조건 추가 -->
		        </if>
		      </where>
		      ORDER BY ${sortField} ${sortOrder}
		    ) B
		  ) C
		  WHERE C.RN BETWEEN #{startRow} AND #{endRow}
		</select>
    
    
     <select id="getTotalUserCount" parameterType="back.model.user.User" resultType="int">
        SELECT COUNT(B.USER_ID) 
          FROM (
              SELECT
		        A.USER_ID, 
		        A.USERNAME, 
		        A.NICKNAME, 
		        A.PASSWORD, 
		        A.EMAIL, 
		        A.USER_TEL,	
		        A.POST_CODE,
        		A.ADDR,
        		A.ADDRD, 
		        A.CREATE_ID,
		        A.UPDATE_ID,
		        TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT,
		        TO_CHAR(A.UPDATE_DT, 'YYYY-MM-DD') AS UPDATE_DT,
		        A.DEL_YN 
		    FROM USERS A
		    <where>			   
			   <if test="searchText != null and searchText != ''">
            	AND (
            	   A.USERNAME LIKE '%'||#{searchText}||'%'	            	
            	)
        	   </if>
        	   <if test="startDate != null and startDate != ''">
		           <![CDATA[ AND A.CREATE_DT >= TO_DATE(#{startDate} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') ]]>
		        </if>
		        <if test="endDate != null and endDate != ''">
		           <![CDATA[ AND A.CREATE_DT <= TO_DATE(#{endDate} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS') ]]>
		        </if>
		     </where>
		    ) B
    </select>


    <!-- 사용자 ID로 사용자 정보 조회 -->
    <select id="getUserById" parameterType="string" resultType="back.model.user.User">
        SELECT 
            USER_ID, 
	        USERNAME,
	        NICKNAME, 
	        PASSWORD, 
	        EMAIL,
	        USER_TEL,
	        POST_CODE,
	        ADDR,
	        ADDRD,
	        ADMIN_YN,
	        DEL_YN,
        	ACC_YN, 
	        CREATE_DT,
            CREATE_ID,
            UPDATE_ID, 
            UPDATE_DT
        FROM 
            USERS
        WHERE 
            USER_ID = #{userId} 
          AND DEL_YN = 'N'
    </select>
    
    <!-- 중복체크 -->
      <select id="overlapByUserId" parameterType="string" resultType="int">
        SELECT
        	COUNT(*)
        FROM 
            USERS
        WHERE 
            USER_ID = #{userId} 
    </select>
    
     <!-- 중복체크 -->
      <select id="emailOverlap" parameterType="string" resultType="int">
        SELECT
        	COUNT(*)
        FROM 
            USERS
        WHERE 
            <!--USER_ID = #{userId}
            AND--> 
            EMAIL = #{email}
    </select>
    
    <!-- 중복체크 -->
      <select id="nicknameOverlap" parameterType="string" resultType="int">
        SELECT
        	COUNT(*)
        FROM 
            USERS
        WHERE 
            <!--USER_ID = #{userId}
            AND--> 
            NICKNAME = #{nickname}
    </select>

    <!-- 사용자 생성 -->
    <insert id="registerUser" parameterType="back.model.user.User">
        INSERT INTO USERS 
        (
        USER_ID, 
        USERNAME,
        NICKNAME, 
        PASSWORD, 
        EMAIL,
        USER_TEL,
        POST_CODE,
	    ADDR,
	    ADDRD, 
        CREATE_ID
        )
        VALUES 
        (
        #{userId}, 
        #{username},
        #{nickname},
        #{password}, 
        #{email},
        #{userTel},
        #{postCode},
		#{addr},
		#{addrD},
        #{createId}
        )
    </insert>

    <!-- 사용자 업데이트 -->
    <update id="updateUser" parameterType="back.model.user.User">
	    UPDATE USERS
	    SET 
	        NICKNAME = #{nickname},
	        EMAIL = #{email},
	        USER_TEL = #{userTel},
	        POST_CODE = #{postCode},
        	ADDR = #{addr},
        	ADDRD = #{addrD},
	        UPDATE_ID = #{updateId, jdbcType=VARCHAR},
	        UPDATE_DT = SYSDATE
	    <if test="password != null and password != ''">
	        , PASSWORD = #{password} <!-- 비밀번호가 제공된 경우만 업데이트 -->
	    </if>
	    WHERE USER_ID = #{userId}
	</update>

    <!-- 사용자 삭제 
    <delete id="deleteUser" parameterType="string">
        DELETE FROM USERS
        WHERE USER_ID = #{userId}
    </delete>
    -->
    
    <!-- 사용자 삭제 (논리 삭제) -->
    <update id="deleteUser" parameterType="back.model.user.User">
        UPDATE USERS 
        SET DEL_YN = 'Y',  <!-- 삭제된 사용자 표시 -->
            UPDATE_ID = #{userId},  <!-- 삭제를 수행한 관리자 ID -->
            UPDATE_DT = SYSDATE  <!-- 삭제 시간 기록 -->
        WHERE USER_ID = #{userId}
    </update>
    
      <update id="userM" parameterType="back.model.user.User">
        UPDATE USERS 
        SET DEL_YN = #{delYn},  <!-- 삭제된 사용자 표시 -->
            UPDATE_ID = #{userId},  <!-- 삭제를 수행한 관리자 ID -->
            UPDATE_DT = SYSDATE  <!-- 삭제 시간 기록 -->
        WHERE USER_ID = #{userId}
    </update>
    
    <!-- 이메일로 사용자 정보 조회 (아이디 찾기용) -->
	<select id="getUserByEmail" parameterType="string" resultType="back.model.user.User">
	    SELECT 
	        USER_ID,
	        USERNAME,
	        EMAIL
	    FROM 
	        USERS
	    WHERE 
	        EMAIL = #{email}
	      AND DEL_YN = 'N'
	</select>
	
	<update id="updatePassword" parameterType="map">
	    UPDATE users
	    SET password = #{password},
	        UPDATE_DT = SYSDATE
	    WHERE USER_ID = #{userId}
	      AND DEL_YN = 'N'
	  </update>
	  
	<select id="existsUserImg" parameterType="string" resultType="int">
   	 SELECT COUNT(*) FROM USER_IMG WHERE USER_ID = #{userId} AND DEL_YN = 'N'
	</select>

	<insert id="insertUserImg" parameterType="back.model.user.User">
	    INSERT INTO USER_IMG (USER_IMG_ID, USER_ID, USER_IMG_NAME, USER_IMG_PATH, CREATE_ID, CREATE_DT, DEL_YN)
	    VALUES (USER_IMG_SEQ.NEXTVAL, #{userId}, #{userImgName}, #{userImgPath}, #{createId}, SYSDATE, 'N')
	</insert>
	
	<update id="updateUserImg" parameterType="back.model.user.User">
	    UPDATE USER_IMG
	    SET USER_IMG_NAME = #{userImgName},
	        USER_IMG_PATH = #{userImgPath},
	        UPDATE_ID = #{updateId},
	        UPDATE_DT = SYSDATE
	    WHERE USER_ID = #{userId} AND DEL_YN = 'N'
	</update>
	
	<update id="updateUserStatus" parameterType="back.model.user.User">
   	 UPDATE USERS
	    SET acc_yn = #{accYn},
	        update_id = #{updateId, jdbcType=VARCHAR},
	        update_dt = SYSDATE
	    WHERE user_id = #{userId}
	</update>

	<select id="findById" parameterType="String" resultType="back.model.user.User">
	    SELECT *
	    FROM USERS
	    WHERE user_id = #{userId}
	</select>
   

</mapper>
